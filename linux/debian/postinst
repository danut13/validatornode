#! /bin/bash

set -e # Exit on error
#set -x # Enable debugging

application_name='Pantos Validator Node'

# Directory and file paths
application_directory='/opt/pantos/validator-node'
log_directory='/var/log/pantos'
base_directory='/etc/pantos'
configuration_file="${base_directory}/validator-node-config.yml"
env_file="${base_directory}/validator-node-config.env"
old_env_file="${env_file}.old_$(date +%Y%m%d_%H%M%S)"
alembic_file="${base_directory}/validator-node-alembic.ini"
old_alembic_file="${alembic_file}.old_$(date +%Y%m%d_%H%M%S)"
startup_script_file="${application_directory}/start-web-server"

# User names
postgresql_user='pantos-validator-node'
rabbitmq_user='pantos-validator-node'
system_user='pantos-validator-node'

# Database and virtual host names
application_database='pantos-validator-node'
celery_database='pantos-validator-node-celery'
virtual_host='pantos-validator-node'

# These are optional dependencies, so we don't want to fail the installation if they are not installed
POSTGRESQL_INSTALLED=$(dpkg-query -W --showformat='${Status}\n' postgresql | grep "install ok installed" || true)
RABBITMQ_INSTALLED=$(dpkg-query -W --showformat='${Status}\n' rabbitmq-server | grep "install ok installed" || true)
# Start postgresql and rabbitmq if systemctl is installed and they are installed too
if [ -x /bin/systemctl ]; then
  if [ -n "$(systemctl list-units --type=service | grep postgresql)" ]; then
    systemctl start postgresql || true
  fi
  if [ -n "$(systemctl list-units --type=service | grep rabbitmq-server)" ]; then
    systemctl start rabbitmq-server || true
  fi
  # Stop pantos services
  systemctl stop pantos-validator-node-server || true
  systemctl stop pantos-validator-node-celery || true
fi

# System user
system_user_exists=$(id ${system_user} >/dev/null 2>&1; echo $?)
if [ "${system_user_exists}" -eq 0 ]; then
  echo "${application_name} system user '${system_user}' already exists"
else
  adduser --system --no-create-home --group --quiet ${system_user}
  echo "${application_name} system user '${system_user}' added"
fi

mkdir -p ${base_directory}
chown ${system_user}:${system_user} ${base_directory}
chmod -R 750 ${base_directory}

# Application
echo "Installing ${application_name} application"
rm --force ${application_directory}/wsgi.py
rm --recursive --force ${application_directory}/virtual-environment/
python3 -m venv ${application_directory}/virtual-environment
source ${application_directory}/virtual-environment/bin/activate
python3 -m pip install ${application_directory}/pantos_validator_node-VERSION-py3-none-any.whl
python3 -m pip install mod_wsgi
deactivate
rm ${application_directory}/pantos_validator_node-VERSION-py3-none-any.whl
ln --symbolic virtual-environment/lib/$(ls ${application_directory}/virtual-environment/lib/ | grep python3)/site-packages/pantos/validatornode/wsgi.py ${application_directory}/wsgi.py
echo "${application_name} application installed in ${application_directory}"

# Startup script
chmod +x ${startup_script_file}

# Configuration
cp ${application_directory}/virtual-environment/lib/python3.*/site-packages/pantos/validator-node-config.yml ${configuration_file}
chown ${system_user}:${system_user} ${configuration_file}
chmod 640 ${configuration_file}
echo "${application_name} configuration file installed at ${configuration_file}"

if [ -e ${env_file} ]; then
  cp ${env_file} ${old_env_file}
  echo "Old ${application_name} environment backed up to ${old_env_file}"
  source ${env_file}
  echo "Environment file exists, filling in any missing environment variables"
else
  echo "Environment file does not exist, creating new one"
  cp ${application_directory}/virtual-environment/lib/python3.*/site-packages/pantos/validator-node-config.env ${env_file}
  chown ${system_user}:${system_user} ${env_file}
  chmod 640 ${env_file}
  echo "Make sure to fill the empty values in ${env_file} before starting the server"
fi


# Alembic configuration
if [ -e "${alembic_file}" ]; then
  mv ${alembic_file} ${old_alembic_file}
  echo "Old ${application_name} alembic configuration file moved to ${old_alembic_file}"
fi
mv ${application_directory}/virtual-environment/lib/python3.*/site-packages/pantos/alembic.ini ${alembic_file}
chown ${system_user}:${system_user} ${alembic_file}
chmod 640 ${alembic_file}
echo "${application_name} configuration file installed at ${alembic_file}"

# Logs
mkdir --parents ${log_directory}
chown ${system_user}:adm ${log_directory}
chmod 750 ${log_directory}
echo "${application_name} log file directory set up at ${log_directory}"

# If Postgresql doesn't exist, check for the configuration to exist and otherwise show a big warning
if [ -n "$POSTGRESQL_INSTALLED" ]; then
  # If Postgresql exists, we check if the user and database exists and create them if not
  # We also check if the old configuration file exists and copy the old database URLs to the new configuration file
  echo -e "\033[1;32mPostgreSQL is installed\033[0m"
  postgresql_user_exists=$(runuser -u postgres -- psql --no-align --no-psqlrc --tuples-only --quiet --command "SELECT 1 FROM pg_roles WHERE rolname='${postgresql_user}'" | grep --quiet --word-regexp ^1; echo $?)
  if [ "${postgresql_user_exists}" -eq 0 ]; then
    echo "${application_name} PostgreSQL user '${postgresql_user}' already exists"
    if [ -z "${DB_URL}" ]; then
      echo "DB_URL does not exist, generating new PostgreSQL password"
      # config doesn't exist but the database user exists, so we generate a new password
      postgresql_password=$(openssl rand -base64 32 | sed --expression 's/\///g;s/=//g')
      runuser -u postgres -- psql --quiet --command "ALTER ROLE \"${postgresql_user}\" WITH PASSWORD '${postgresql_password}'"
      echo "DB_URL='postgresql://${postgresql_user}:${postgresql_password}@localhost/pantos-validator-node'" >> ${env_file}
      echo "CELERY_BACKEND='db+postgresql://${postgresql_user}:${postgresql_password}@localhost/pantos-validator-node-celery'" >> ${env_file}
    fi
  else
    echo "PostgreSQL user does not exist, generating new PostgreSQL user and password"
    postgresql_password=$(openssl rand -base64 32 | sed --expression 's/\///g;s/=//g')
    runuser -u postgres -- psql --quiet --command "CREATE ROLE \"${postgresql_user}\" WITH LOGIN PASSWORD '${postgresql_password}'"
    echo "DB_URL='postgresql://${postgresql_user}:${postgresql_password}@localhost/pantos-validator-node'" >> ${env_file}
    echo "CELERY_BACKEND='db+postgresql://${postgresql_user}:${postgresql_password}@localhost/pantos-validator-node-celery'" >> ${env_file}
    echo "${application_name} PostgreSQL user '${postgresql_user}' created"
  fi
  application_database_exists=$(runuser -u postgres -- psql --no-align --no-psqlrc --tuples-only --quiet --list | cut --delimiter \| --fields 1 | grep --quiet --word-regexp "^${application_database}"; echo $?)
  if [ "${application_database_exists}" -eq 0 ]; then
    echo "${application_name} PostgreSQL application database '${application_database}' already exists"
  else
    runuser -u postgres -- psql --quiet --command "CREATE DATABASE \"${application_database}\" WITH OWNER \"${postgresql_user}\""
    echo "${application_name} PostgreSQL application database '${application_database}' created"
  fi
  celery_database_exists=$(runuser -u postgres -- psql --no-align --no-psqlrc --tuples-only --quiet --list | cut --delimiter \| --fields 1 | grep --quiet --word-regexp "^${celery_database}"; echo $?)
  if [ "${celery_database_exists}" -eq 0 ]; then
    echo "${application_name} PostgreSQL Celery database '${celery_database}' already exists"
  else
    runuser -u postgres -- psql --quiet --command "CREATE DATABASE \"${celery_database}\" WITH OWNER \"${postgresql_user}\""
    echo "${application_name} PostgreSQL Celery database '${celery_database}' created"
  fi
fi

if [ -z "$RABBITMQ_INSTALLED" ]; then
  echo -e "\033[1;33mWarning:\033[0m RabbitMQ is not installed, please make sure to configure the message broker manually"
else
  echo -e "\033[1;32mRabbitMQ is installed\033[0m"
  echo "Checking if the user and virtual host exist and creating them if not"
  # RabbitMQ
  rabbitmq_user_exists=$(rabbitmqctl list_users | grep --quiet --word-regexp "^${rabbitmq_user}"; echo $?)
  if [ "${rabbitmq_user_exists}" -eq 0 ]; then
    echo "${application_name} RabbitMQ user '${rabbitmq_user}' already exists"
    if [ -z "${CELERY_BROKER}" ]; then
      # old config does not exist but the rabbitmq user exists, so we generate a new password
      # and change the password of the user
      echo "Env variable CELERY_BROKER is not defined, generating new RabbitMQ password"
      if [ ! command -v openssl ]; then
        echo "openssl is not installed, please install the package with the recommended dependencies to generate the password"
        exit 1
      fi
      rabbitmq_password=$(openssl rand -base64 32 | sed --expression 's/\///g;s/=//g')
      rabbitmqctl change_password "${rabbitmq_user}" "${rabbitmq_password}"
      echo "CELERY_BROKER='amqp://${rabbitmq_user}:${rabbitmq_password}@localhost:5672/pantos-validator-node'" >> ${env_file}
    fi
  else
    if [ ! command -v openssl ]; then
      echo "openssl is not installed, please install the package with the recommended dependencies to generate the password"
      exit 1
    fi
    echo "RabbitMQ user does not exist, generating new RabbitMQ user and password"
    rabbitmq_password=$(openssl rand -base64 32 | sed --expression 's/\///g;s/=//g')
    rabbitmqctl add_user "${rabbitmq_user}" "${rabbitmq_password}"
    echo "CELERY_BROKER='amqp://${rabbitmq_user}:${rabbitmq_password}@localhost:5672/pantos-validator-node'" >> ${env_file}
  fi
  virtual_host_exists=$(rabbitmqctl list_vhosts | grep --quiet --word-regexp "^${virtual_host}"; echo $?)
  if [ "${virtual_host_exists}" -eq 0 ]; then
    echo "${application_name} RabbitMQ virtual host '${virtual_host}' already exists"
  else
    echo "${application_name} RabbitMQ virtual host does not exist, creating new RabbitMQ virtual host"
    rabbitmqctl add_vhost ${virtual_host}
    rabbitmqctl set_permissions -p ${virtual_host} ${rabbitmq_user} ".*" ".*" ".*"
    echo "${application_name} RabbitMQ virtual host '${virtual_host}' added"
  fi
fi

echo
echo "${application_name} installation finished"
echo
echo -e "\033[1;33mImportant:\033[0m Review the ${application_name} configuration and file dependencies before starting the server:"
echo "- Environment variables in ${env_file}"
echo "- Keystore files (e.g. at /etc/pantos/validator-node.keystore)"
echo "- SSL certificate and key files at /etc/pantos/validator-node-fullchain.pem and /etc/pantos/validator-node-privkey.pem"
echo "- ADVANCED CONFIGURATION: ${configuration_file}"
echo
echo "Afterwards start the server:"
echo "sudo systemctl start pantos-validator-node-server => Start the server"
echo "sudo systemctl status pantos-validator-node-server => Check the server status"
echo "sudo journalctl -u pantos-validator-node-server => Check the server logs"
echo "For starting the worker, use:"
echo "sudo systemctl start pantos-validator-node-celery => Start the worker"
echo "sudo systemctl status pantos-validator-node-celery => Check the worker status"
echo "sudo journalctl -u pantos-validator-node-celery => Check the worker logs"
echo
echo "For more in-depth logs, see: ${log_directory}"
echo
